# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mistk.orchestrator.server.models.base_model_ import Model
from mistk.orchestrator.server.models.object_info import ObjectInfo  # noqa: F401,E501
from mistk.orchestrator.server import util


class OrchestratorInstanceStatus(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, object_info: ObjectInfo=None, state: str=None, payload: object=None):  # noqa: E501
        """OrchestratorInstanceStatus - a model defined in Swagger

        :param object_info: The object_info of this OrchestratorInstanceStatus.  # noqa: E501
        :type object_info: ObjectInfo
        :param state: The state of this OrchestratorInstanceStatus.  # noqa: E501
        :type state: str
        :param payload: The payload of this OrchestratorInstanceStatus.  # noqa: E501
        :type payload: object
        """
        self.swagger_types = {
            'object_info': ObjectInfo,
            'state': str,
            'payload': object
        }

        self.attribute_map = {
            'object_info': 'objectInfo',
            'state': 'state',
            'payload': 'payload'
        }

        self._object_info = object_info
        self._state = state
        self._payload = payload

    @classmethod
    def from_dict(cls, dikt) -> 'OrchestratorInstanceStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The OrchestratorInstanceStatus of this OrchestratorInstanceStatus.  # noqa: E501
        :rtype: OrchestratorInstanceStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def object_info(self) -> ObjectInfo:
        """Gets the object_info of this OrchestratorInstanceStatus.


        :return: The object_info of this OrchestratorInstanceStatus.
        :rtype: ObjectInfo
        """
        return self._object_info

    @object_info.setter
    def object_info(self, object_info: ObjectInfo):
        """Sets the object_info of this OrchestratorInstanceStatus.


        :param object_info: The object_info of this OrchestratorInstanceStatus.
        :type object_info: ObjectInfo
        """
        if object_info is None:
            raise ValueError("Invalid value for `object_info`, must not be `None`")  # noqa: E501

        self._object_info = object_info

    @property
    def state(self) -> str:
        """Gets the state of this OrchestratorInstanceStatus.

        The current state of the orchestrator instance  # noqa: E501

        :return: The state of this OrchestratorInstanceStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this OrchestratorInstanceStatus.

        The current state of the orchestrator instance  # noqa: E501

        :param state: The state of this OrchestratorInstanceStatus.
        :type state: str
        """
        allowed_values = ["uninitialized", "initializing", "waiting_for_agents", "registering_agent", "ready", "running", "completed_episode", "stopping_episode", "resetting", "failed", "completed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def payload(self) -> object:
        """Gets the payload of this OrchestratorInstanceStatus.

        Additional arbitrary information relevant to the current state.    # noqa: E501

        :return: The payload of this OrchestratorInstanceStatus.
        :rtype: object
        """
        return self._payload

    @payload.setter
    def payload(self, payload: object):
        """Sets the payload of this OrchestratorInstanceStatus.

        Additional arbitrary information relevant to the current state.    # noqa: E501

        :param payload: The payload of this OrchestratorInstanceStatus.
        :type payload: object
        """

        self._payload = payload
