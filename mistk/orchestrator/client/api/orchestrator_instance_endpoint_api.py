# coding: utf-8

"""
    Model Integration Software ToolKit - Orchestrator

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mistk.orchestrator.client.api_client import ApiClient


class OrchestratorInstanceEndpointApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_status(self, **kwargs):  # noqa: E501
        """Get the status of the orchestrator  # noqa: E501

        Retrieves the current status of the orchestrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. 
        :param int resource_version: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. 
        :return: OrchestratorInstanceStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_status_with_http_info(self, **kwargs):  # noqa: E501
        """Get the status of the orchestrator  # noqa: E501

        Retrieves the current status of the orchestrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param bool watch: Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. 
        :param int resource_version: When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. 
        :return: OrchestratorInstanceStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['watch', 'resource_version']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'watch' in params:
            query_params.append(('watch', params['watch']))  # noqa: E501
        if 'resource_version' in params:
            query_params.append(('resourceVersion', params['resource_version']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrchestratorInstanceStatus',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def initialize(self, initialization_parameters, **kwargs):  # noqa: E501
        """Initialize the orchestrator  # noqa: E501

        Instructs the orchestrator instance to initialize.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initialize(initialization_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelInstanceInitParams initialization_parameters: Initialization parameters for the orchestrator including the objectives, properties, and hparams. Objectives are a list of objectives for this orchestrator instance. Properties are a dictionary of properties for this orchestrator instance. Hparams are a dictionary of hyperparameters for this orchestrator instance.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.initialize_with_http_info(initialization_parameters, **kwargs)  # noqa: E501
        else:
            (data) = self.initialize_with_http_info(initialization_parameters, **kwargs)  # noqa: E501
            return data

    def initialize_with_http_info(self, initialization_parameters, **kwargs):  # noqa: E501
        """Initialize the orchestrator  # noqa: E501

        Instructs the orchestrator instance to initialize.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.initialize_with_http_info(initialization_parameters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ModelInstanceInitParams initialization_parameters: Initialization parameters for the orchestrator including the objectives, properties, and hparams. Objectives are a list of objectives for this orchestrator instance. Properties are a dictionary of properties for this orchestrator instance. Hparams are a dictionary of hyperparameters for this orchestrator instance.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['initialization_parameters']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initialize" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'initialization_parameters' is set
        if ('initialization_parameters' not in params or
                params['initialization_parameters'] is None):
            raise ValueError("Missing the required parameter `initialization_parameters` when calling `initialize`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'initialization_parameters' in params:
            body_params = params['initialization_parameters']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/initialize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def register_agent(self, agent_name, agent_url, **kwargs):  # noqa: E501
        """Registers an agent to the orchestrator  # noqa: E501

        Connects an agent, which should have been initialized, to the orchestrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_agent(agent_name, agent_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str agent_name: The name of this agent (required)
        :param str agent_url: The URL to this agent (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.register_agent_with_http_info(agent_name, agent_url, **kwargs)  # noqa: E501
        else:
            (data) = self.register_agent_with_http_info(agent_name, agent_url, **kwargs)  # noqa: E501
            return data

    def register_agent_with_http_info(self, agent_name, agent_url, **kwargs):  # noqa: E501
        """Registers an agent to the orchestrator  # noqa: E501

        Connects an agent, which should have been initialized, to the orchestrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.register_agent_with_http_info(agent_name, agent_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str agent_name: The name of this agent (required)
        :param str agent_url: The URL to this agent (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['agent_name', 'agent_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method register_agent" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'agent_name' is set
        if ('agent_name' not in params or
                params['agent_name'] is None):
            raise ValueError("Missing the required parameter `agent_name` when calling `register_agent`")  # noqa: E501
        # verify the required parameter 'agent_url' is set
        if ('agent_url' not in params or
                params['agent_url'] is None):
            raise ValueError("Missing the required parameter `agent_url` when calling `register_agent`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'agent_name' in params:
            query_params.append(('agentName', params['agent_name']))  # noqa: E501
        if 'agent_url' in params:
            query_params.append(('agentUrl', params['agent_url']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/registerAgent', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def reset(self, **kwargs):  # noqa: E501
        """Resets the orchestrator  # noqa: E501

        Resets the orchestrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.reset_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.reset_with_http_info(**kwargs)  # noqa: E501
            return data

    def reset_with_http_info(self, **kwargs):  # noqa: E501
        """Resets the orchestrator  # noqa: E501

        Resets the orchestrator  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.reset_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method reset" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_episode(self, episode_cfg, **kwargs):  # noqa: E501
        """Starts an episode  # noqa: E501

        Instructs the container to have the orchestrator play an episode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_episode(episode_cfg, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object episode_cfg: Configuration parameters needed to be used by that episode (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.start_episode_with_http_info(episode_cfg, **kwargs)  # noqa: E501
        else:
            (data) = self.start_episode_with_http_info(episode_cfg, **kwargs)  # noqa: E501
            return data

    def start_episode_with_http_info(self, episode_cfg, **kwargs):  # noqa: E501
        """Starts an episode  # noqa: E501

        Instructs the container to have the orchestrator play an episode  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.start_episode_with_http_info(episode_cfg, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param object episode_cfg: Configuration parameters needed to be used by that episode (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['episode_cfg']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_episode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'episode_cfg' is set
        if ('episode_cfg' not in params or
                params['episode_cfg'] is None):
            raise ValueError("Missing the required parameter `episode_cfg` when calling `start_episode`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'episode_cfg' in params:
            body_params = params['episode_cfg']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/startEpisode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def stop_episode(self, **kwargs):  # noqa: E501
        """Stops the episode that the orchestrator is currently playing  # noqa: E501

        Stops the episode that the orchestrator is currently playing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_episode(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.stop_episode_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.stop_episode_with_http_info(**kwargs)  # noqa: E501
            return data

    def stop_episode_with_http_info(self, **kwargs):  # noqa: E501
        """Stops the episode that the orchestrator is currently playing  # noqa: E501

        Stops the episode that the orchestrator is currently playing  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.stop_episode_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_episode" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/stopEpisode', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
