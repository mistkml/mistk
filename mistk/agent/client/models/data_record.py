# coding: utf-8

"""
    Model Integration Software ToolKit - Agent

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DataRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'record_id': 'str',
        'reference_set_project': 'str',
        'referenced_set_id': 'str',
        'values': 'list[object]'
    }

    attribute_map = {
        'record_id': 'recordId',
        'reference_set_project': 'referenceSetProject',
        'referenced_set_id': 'referencedSetId',
        'values': 'values'
    }

    def __init__(self, record_id=None, reference_set_project=None, referenced_set_id=None, values=None):  # noqa: E501
        """DataRecord - a model defined in Swagger"""  # noqa: E501

        self._record_id = None
        self._reference_set_project = None
        self._referenced_set_id = None
        self._values = None
        self.discriminator = None

        self.record_id = record_id
        if reference_set_project is not None:
            self.reference_set_project = reference_set_project
        if referenced_set_id is not None:
            self.referenced_set_id = referenced_set_id
        if values is not None:
            self.values = values

    @property
    def record_id(self):
        """Gets the record_id of this DataRecord.  # noqa: E501

        The id of this record  # noqa: E501

        :return: The record_id of this DataRecord.  # noqa: E501
        :rtype: str
        """
        return self._record_id

    @record_id.setter
    def record_id(self, record_id):
        """Sets the record_id of this DataRecord.

        The id of this record  # noqa: E501

        :param record_id: The record_id of this DataRecord.  # noqa: E501
        :type: str
        """
        if record_id is None:
            raise ValueError("Invalid value for `record_id`, must not be `None`")  # noqa: E501

        self._record_id = record_id

    @property
    def reference_set_project(self):
        """Gets the reference_set_project of this DataRecord.  # noqa: E501

        the project associated with the data record set   # noqa: E501

        :return: The reference_set_project of this DataRecord.  # noqa: E501
        :rtype: str
        """
        return self._reference_set_project

    @reference_set_project.setter
    def reference_set_project(self, reference_set_project):
        """Sets the reference_set_project of this DataRecord.

        the project associated with the data record set   # noqa: E501

        :param reference_set_project: The reference_set_project of this DataRecord.  # noqa: E501
        :type: str
        """

        self._reference_set_project = reference_set_project

    @property
    def referenced_set_id(self):
        """Gets the referenced_set_id of this DataRecord.  # noqa: E501

        The UUID of the Data Record Set this record is associated with. This should be the ObjectId of a GroundTruthSet or PredictionSet   # noqa: E501

        :return: The referenced_set_id of this DataRecord.  # noqa: E501
        :rtype: str
        """
        return self._referenced_set_id

    @referenced_set_id.setter
    def referenced_set_id(self, referenced_set_id):
        """Sets the referenced_set_id of this DataRecord.

        The UUID of the Data Record Set this record is associated with. This should be the ObjectId of a GroundTruthSet or PredictionSet   # noqa: E501

        :param referenced_set_id: The referenced_set_id of this DataRecord.  # noqa: E501
        :type: str
        """

        self._referenced_set_id = referenced_set_id

    @property
    def values(self):
        """Gets the values of this DataRecord.  # noqa: E501

        A list of labels, optionally this could be a list of dictionaries instead where the dictionaries contain the ground truth label plus a bounding box, etc, this could also include certainty assessments.   # noqa: E501

        :return: The values of this DataRecord.  # noqa: E501
        :rtype: list[object]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this DataRecord.

        A list of labels, optionally this could be a list of dictionaries instead where the dictionaries contain the ground truth label plus a bounding box, etc, this could also include certainty assessments.   # noqa: E501

        :param values: The values of this DataRecord.  # noqa: E501
        :type: list[object]
        """

        self._values = values

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DataRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
