# coding: utf-8

"""
    Model Integration Software ToolKit - Metric Evaluation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ObjectReference(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        'project': 'str',
        'id': 'str',
        'name': 'str',
        'instance': 'object'
    }

    attribute_map = {
        'kind': 'kind',
        'project': 'project',
        'id': 'id',
        'name': 'name',
        'instance': 'instance'
    }

    def __init__(self, kind=None, project=None, id=None, name=None, instance=None):  # noqa: E501
        """ObjectReference - a model defined in Swagger"""  # noqa: E501

        self._kind = None
        self._project = None
        self._id = None
        self._name = None
        self._instance = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if project is not None:
            self.project = project
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if instance is not None:
            self.instance = instance

    @property
    def kind(self):
        """Gets the kind of this ObjectReference.  # noqa: E501

        The type of the object being referenced. This is often optional as it will be inferrred by the context.   # noqa: E501

        :return: The kind of this ObjectReference.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ObjectReference.

        The type of the object being referenced. This is often optional as it will be inferrred by the context.   # noqa: E501

        :param kind: The kind of this ObjectReference.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def project(self):
        """Gets the project of this ObjectReference.  # noqa: E501

        The project (namespace) of this object.   # noqa: E501

        :return: The project of this ObjectReference.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ObjectReference.

        The project (namespace) of this object.   # noqa: E501

        :param project: The project of this ObjectReference.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def id(self):
        """Gets the id of this ObjectReference.  # noqa: E501

        The unique identifier of the object.  # noqa: E501

        :return: The id of this ObjectReference.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjectReference.

        The unique identifier of the object.  # noqa: E501

        :param id: The id of this ObjectReference.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ObjectReference.  # noqa: E501

        The unique name of the object.  # noqa: E501

        :return: The name of this ObjectReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjectReference.

        The unique name of the object.  # noqa: E501

        :param name: The name of this ObjectReference.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def instance(self):
        """Gets the instance of this ObjectReference.  # noqa: E501

        Optionally, the object reference can contain the complete object.  This is useful for unit testing where you don't want to go out to the SRM to obtain the referenced object.   # noqa: E501

        :return: The instance of this ObjectReference.  # noqa: E501
        :rtype: object
        """
        return self._instance

    @instance.setter
    def instance(self, instance):
        """Sets the instance of this ObjectReference.

        Optionally, the object reference can contain the complete object.  This is useful for unit testing where you don't want to go out to the SRM to obtain the referenced object.   # noqa: E501

        :param instance: The instance of this ObjectReference.  # noqa: E501
        :type: object
        """

        self._instance = instance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ObjectReference, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectReference):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
