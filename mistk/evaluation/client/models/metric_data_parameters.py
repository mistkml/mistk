# coding: utf-8

"""
    Model Integration Software ToolKit - Metric Evaluation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.4.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MetricDataParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'prediction_labels': 'str',
        'truth_labels': 'str',
        'prediction_scores': 'str',
        'truth_bounds': 'str',
        'prediction_bounds': 'str'
    }

    attribute_map = {
        'prediction_labels': 'predictionLabels',
        'truth_labels': 'truthLabels',
        'prediction_scores': 'predictionScores',
        'truth_bounds': 'truthBounds',
        'prediction_bounds': 'predictionBounds'
    }

    def __init__(self, prediction_labels=None, truth_labels=None, prediction_scores=None, truth_bounds=None, prediction_bounds=None):  # noqa: E501
        """MetricDataParameters - a model defined in Swagger"""  # noqa: E501

        self._prediction_labels = None
        self._truth_labels = None
        self._prediction_scores = None
        self._truth_bounds = None
        self._prediction_bounds = None
        self.discriminator = None

        if prediction_labels is not None:
            self.prediction_labels = prediction_labels
        if truth_labels is not None:
            self.truth_labels = truth_labels
        if prediction_scores is not None:
            self.prediction_scores = prediction_scores
        if truth_bounds is not None:
            self.truth_bounds = truth_bounds
        if prediction_bounds is not None:
            self.prediction_bounds = prediction_bounds

    @property
    def prediction_labels(self):
        """Gets the prediction_labels of this MetricDataParameters.  # noqa: E501

        The arg name for prediction labels  # noqa: E501

        :return: The prediction_labels of this MetricDataParameters.  # noqa: E501
        :rtype: str
        """
        return self._prediction_labels

    @prediction_labels.setter
    def prediction_labels(self, prediction_labels):
        """Sets the prediction_labels of this MetricDataParameters.

        The arg name for prediction labels  # noqa: E501

        :param prediction_labels: The prediction_labels of this MetricDataParameters.  # noqa: E501
        :type: str
        """

        self._prediction_labels = prediction_labels

    @property
    def truth_labels(self):
        """Gets the truth_labels of this MetricDataParameters.  # noqa: E501

        The arg name for ground truth labels  # noqa: E501

        :return: The truth_labels of this MetricDataParameters.  # noqa: E501
        :rtype: str
        """
        return self._truth_labels

    @truth_labels.setter
    def truth_labels(self, truth_labels):
        """Sets the truth_labels of this MetricDataParameters.

        The arg name for ground truth labels  # noqa: E501

        :param truth_labels: The truth_labels of this MetricDataParameters.  # noqa: E501
        :type: str
        """

        self._truth_labels = truth_labels

    @property
    def prediction_scores(self):
        """Gets the prediction_scores of this MetricDataParameters.  # noqa: E501

        The arg name for prediction scores  # noqa: E501

        :return: The prediction_scores of this MetricDataParameters.  # noqa: E501
        :rtype: str
        """
        return self._prediction_scores

    @prediction_scores.setter
    def prediction_scores(self, prediction_scores):
        """Sets the prediction_scores of this MetricDataParameters.

        The arg name for prediction scores  # noqa: E501

        :param prediction_scores: The prediction_scores of this MetricDataParameters.  # noqa: E501
        :type: str
        """

        self._prediction_scores = prediction_scores

    @property
    def truth_bounds(self):
        """Gets the truth_bounds of this MetricDataParameters.  # noqa: E501

        The arg name for ground truth bounds  # noqa: E501

        :return: The truth_bounds of this MetricDataParameters.  # noqa: E501
        :rtype: str
        """
        return self._truth_bounds

    @truth_bounds.setter
    def truth_bounds(self, truth_bounds):
        """Sets the truth_bounds of this MetricDataParameters.

        The arg name for ground truth bounds  # noqa: E501

        :param truth_bounds: The truth_bounds of this MetricDataParameters.  # noqa: E501
        :type: str
        """

        self._truth_bounds = truth_bounds

    @property
    def prediction_bounds(self):
        """Gets the prediction_bounds of this MetricDataParameters.  # noqa: E501

        The arg name for prediction bounds  # noqa: E501

        :return: The prediction_bounds of this MetricDataParameters.  # noqa: E501
        :rtype: str
        """
        return self._prediction_bounds

    @prediction_bounds.setter
    def prediction_bounds(self, prediction_bounds):
        """Sets the prediction_bounds of this MetricDataParameters.

        The arg name for prediction bounds  # noqa: E501

        :param prediction_bounds: The prediction_bounds of this MetricDataParameters.  # noqa: E501
        :type: str
        """

        self._prediction_bounds = prediction_bounds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricDataParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricDataParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
