# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from mistk.agent.server.models.base_model_ import Model
from mistk.agent.server import util


class AgentInstanceInitParams(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, model_properties: object=None, hyperparameters: object=None):  # noqa: E501
        """AgentInstanceInitParams - a model defined in Swagger

        :param model_properties: The model_properties of this AgentInstanceInitParams.  # noqa: E501
        :type model_properties: object
        :param hyperparameters: The hyperparameters of this AgentInstanceInitParams.  # noqa: E501
        :type hyperparameters: object
        """
        self.swagger_types = {
            'model_properties': object,
            'hyperparameters': object
        }

        self.attribute_map = {
            'model_properties': 'modelProperties',
            'hyperparameters': 'hyperparameters'
        }

        self._model_properties = model_properties
        self._hyperparameters = hyperparameters

    @classmethod
    def from_dict(cls, dikt) -> 'AgentInstanceInitParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AgentInstanceInitParams of this AgentInstanceInitParams.  # noqa: E501
        :rtype: AgentInstanceInitParams
        """
        return util.deserialize_model(dikt, cls)

    @property
    def model_properties(self) -> object:
        """Gets the model_properties of this AgentInstanceInitParams.

        A dictionary of settings or configuration values that are passed from the ecosystem, but are not considered model hyperparameters. Model properties are typically defined by a specific implementation of an algorithm (ie. a PyTorch implementation of Densenet may have different properties than a Tensorflow implementation).   # noqa: E501

        :return: The model_properties of this AgentInstanceInitParams.
        :rtype: object
        """
        return self._model_properties

    @model_properties.setter
    def model_properties(self, model_properties: object):
        """Sets the model_properties of this AgentInstanceInitParams.

        A dictionary of settings or configuration values that are passed from the ecosystem, but are not considered model hyperparameters. Model properties are typically defined by a specific implementation of an algorithm (ie. a PyTorch implementation of Densenet may have different properties than a Tensorflow implementation).   # noqa: E501

        :param model_properties: The model_properties of this AgentInstanceInitParams.
        :type model_properties: object
        """

        self._model_properties = model_properties

    @property
    def hyperparameters(self) -> object:
        """Gets the hyperparameters of this AgentInstanceInitParams.

        A dictionary of hyperparameters that are used by the model. Hyperparameters are typically defined by the algorithm that a model is based on.   # noqa: E501

        :return: The hyperparameters of this AgentInstanceInitParams.
        :rtype: object
        """
        return self._hyperparameters

    @hyperparameters.setter
    def hyperparameters(self, hyperparameters: object):
        """Sets the hyperparameters of this AgentInstanceInitParams.

        A dictionary of hyperparameters that are used by the model. Hyperparameters are typically defined by the algorithm that a model is based on.   # noqa: E501

        :param hyperparameters: The hyperparameters of this AgentInstanceInitParams.
        :type hyperparameters: object
        """

        self._hyperparameters = hyperparameters
