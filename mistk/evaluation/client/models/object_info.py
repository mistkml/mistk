# coding: utf-8

"""
    Model Integration Software ToolKit - Metric Evaluation

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ObjectInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'kind': 'str',
        'id': 'str',
        'name': 'str',
        'display_name': 'str',
        'description': 'str',
        'summary': 'str',
        'owner': 'str',
        'project': 'str',
        'public': 'bool',
        'sharable': 'bool',
        'labels': 'object',
        'resources': 'list[str]',
        'resource_version': 'int',
        'creation_time': 'datetime',
        'modification_time': 'datetime'
    }

    attribute_map = {
        'kind': 'kind',
        'id': 'id',
        'name': 'name',
        'display_name': 'displayName',
        'description': 'description',
        'summary': 'summary',
        'owner': 'owner',
        'project': 'project',
        'public': 'public',
        'sharable': 'sharable',
        'labels': 'labels',
        'resources': 'resources',
        'resource_version': 'resourceVersion',
        'creation_time': 'creationTime',
        'modification_time': 'modificationTime'
    }

    def __init__(self, kind=None, id=None, name=None, display_name=None, description=None, summary=None, owner=None, project=None, public=None, sharable=None, labels=None, resources=None, resource_version=None, creation_time=None, modification_time=None):  # noqa: E501
        """ObjectInfo - a model defined in Swagger"""  # noqa: E501

        self._kind = None
        self._id = None
        self._name = None
        self._display_name = None
        self._description = None
        self._summary = None
        self._owner = None
        self._project = None
        self._public = None
        self._sharable = None
        self._labels = None
        self._resources = None
        self._resource_version = None
        self._creation_time = None
        self._modification_time = None
        self.discriminator = None

        if kind is not None:
            self.kind = kind
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if display_name is not None:
            self.display_name = display_name
        if description is not None:
            self.description = description
        if summary is not None:
            self.summary = summary
        if owner is not None:
            self.owner = owner
        if project is not None:
            self.project = project
        if public is not None:
            self.public = public
        if sharable is not None:
            self.sharable = sharable
        if labels is not None:
            self.labels = labels
        if resources is not None:
            self.resources = resources
        if resource_version is not None:
            self.resource_version = resource_version
        if creation_time is not None:
            self.creation_time = creation_time
        if modification_time is not None:
            self.modification_time = modification_time

    @property
    def kind(self):
        """Gets the kind of this ObjectInfo.  # noqa: E501

        This is the type of the resource (e.g., Model, Dataset). The field is primarily used when returning watch events, where the type of the field will be unknown.  When submitting resources, this field will often simply be inferred from the context of the submission.   # noqa: E501

        :return: The kind of this ObjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this ObjectInfo.

        This is the type of the resource (e.g., Model, Dataset). The field is primarily used when returning watch events, where the type of the field will be unknown.  When submitting resources, this field will often simply be inferred from the context of the submission.   # noqa: E501

        :param kind: The kind of this ObjectInfo.  # noqa: E501
        :type: str
        """

        self._kind = kind

    @property
    def id(self):
        """Gets the id of this ObjectInfo.  # noqa: E501

        The unique identifier of the object.  This will be generated automatically.   # noqa: E501

        :return: The id of this ObjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ObjectInfo.

        The unique identifier of the object.  This will be generated automatically.   # noqa: E501

        :param id: The id of this ObjectInfo.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ObjectInfo.  # noqa: E501

        The unique name of the object. Names of SML resources should be up to maximum length of 253 characters and consist of lower case alphanumeric characters, -, and .   # noqa: E501

        :return: The name of this ObjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ObjectInfo.

        The unique name of the object. Names of SML resources should be up to maximum length of 253 characters and consist of lower case alphanumeric characters, -, and .   # noqa: E501

        :param name: The name of this ObjectInfo.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def display_name(self):
        """Gets the display_name of this ObjectInfo.  # noqa: E501

        The name of this resoure, as presented via this UI.  This field can have spaces and upper and lower case alphanumeric  characters as well as spaces.   # noqa: E501

        :return: The display_name of this ObjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ObjectInfo.

        The name of this resoure, as presented via this UI.  This field can have spaces and upper and lower case alphanumeric  characters as well as spaces.   # noqa: E501

        :param display_name: The display_name of this ObjectInfo.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def description(self):
        """Gets the description of this ObjectInfo.  # noqa: E501

        A documentation description of the resource.  This string can be in Markdown form.   # noqa: E501

        :return: The description of this ObjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ObjectInfo.

        A documentation description of the resource.  This string can be in Markdown form.   # noqa: E501

        :param description: The description of this ObjectInfo.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def summary(self):
        """Gets the summary of this ObjectInfo.  # noqa: E501

        A short description of this object   # noqa: E501

        :return: The summary of this ObjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ObjectInfo.

        A short description of this object   # noqa: E501

        :param summary: The summary of this ObjectInfo.  # noqa: E501
        :type: str
        """

        self._summary = summary

    @property
    def owner(self):
        """Gets the owner of this ObjectInfo.  # noqa: E501

        The owner/creator of this object.   # noqa: E501

        :return: The owner of this ObjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this ObjectInfo.

        The owner/creator of this object.   # noqa: E501

        :param owner: The owner of this ObjectInfo.  # noqa: E501
        :type: str
        """

        self._owner = owner

    @property
    def project(self):
        """Gets the project of this ObjectInfo.  # noqa: E501

        The project for this object (assuming the resource is project-scoped)   # noqa: E501

        :return: The project of this ObjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ObjectInfo.

        The project for this object (assuming the resource is project-scoped)   # noqa: E501

        :param project: The project of this ObjectInfo.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def public(self):
        """Gets the public of this ObjectInfo.  # noqa: E501

        Boolean flag indicating whether this resource will be  accessible to members outside of the project.   # noqa: E501

        :return: The public of this ObjectInfo.  # noqa: E501
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """Sets the public of this ObjectInfo.

        Boolean flag indicating whether this resource will be  accessible to members outside of the project.   # noqa: E501

        :param public: The public of this ObjectInfo.  # noqa: E501
        :type: bool
        """

        self._public = public

    @property
    def sharable(self):
        """Gets the sharable of this ObjectInfo.  # noqa: E501

        Boolean flag indicating whether this resource may be shared with third-party applications (i.e., the Marketplace).   # noqa: E501

        :return: The sharable of this ObjectInfo.  # noqa: E501
        :rtype: bool
        """
        return self._sharable

    @sharable.setter
    def sharable(self, sharable):
        """Sets the sharable of this ObjectInfo.

        Boolean flag indicating whether this resource may be shared with third-party applications (i.e., the Marketplace).   # noqa: E501

        :param sharable: The sharable of this ObjectInfo.  # noqa: E501
        :type: bool
        """

        self._sharable = sharable

    @property
    def labels(self):
        """Gets the labels of this ObjectInfo.  # noqa: E501

        Key-value pairs of annotations associate with the object.   # noqa: E501

        :return: The labels of this ObjectInfo.  # noqa: E501
        :rtype: object
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this ObjectInfo.

        Key-value pairs of annotations associate with the object.   # noqa: E501

        :param labels: The labels of this ObjectInfo.  # noqa: E501
        :type: object
        """

        self._labels = labels

    @property
    def resources(self):
        """Gets the resources of this ObjectInfo.  # noqa: E501

        An array of resources/reference URIs   # noqa: E501

        :return: The resources of this ObjectInfo.  # noqa: E501
        :rtype: list[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this ObjectInfo.

        An array of resources/reference URIs   # noqa: E501

        :param resources: The resources of this ObjectInfo.  # noqa: E501
        :type: list[str]
        """

        self._resources = resources

    @property
    def resource_version(self):
        """Gets the resource_version of this ObjectInfo.  # noqa: E501

        This is the server-managed version for the object.  It is used  to support monitoring of resources.  This should not be set by the client (and will likely be ignored if it is)   # noqa: E501

        :return: The resource_version of this ObjectInfo.  # noqa: E501
        :rtype: int
        """
        return self._resource_version

    @resource_version.setter
    def resource_version(self, resource_version):
        """Sets the resource_version of this ObjectInfo.

        This is the server-managed version for the object.  It is used  to support monitoring of resources.  This should not be set by the client (and will likely be ignored if it is)   # noqa: E501

        :param resource_version: The resource_version of this ObjectInfo.  # noqa: E501
        :type: int
        """

        self._resource_version = resource_version

    @property
    def creation_time(self):
        """Gets the creation_time of this ObjectInfo.  # noqa: E501

        The date time at which this object was initially created. This will be auto generated by the underlying database. Any user input for this field will be ignored. This will be in the isoformat of 'YYYY-MM-DDTHH:MM:SS.ffffff'   # noqa: E501

        :return: The creation_time of this ObjectInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ObjectInfo.

        The date time at which this object was initially created. This will be auto generated by the underlying database. Any user input for this field will be ignored. This will be in the isoformat of 'YYYY-MM-DDTHH:MM:SS.ffffff'   # noqa: E501

        :param creation_time: The creation_time of this ObjectInfo.  # noqa: E501
        :type: datetime
        """

        self._creation_time = creation_time

    @property
    def modification_time(self):
        """Gets the modification_time of this ObjectInfo.  # noqa: E501

        The date time at which this object was last modified. This will be auto generated by the underlying database. Any user input for this field will be ignored. This will be in the isoformat of 'YYYY-MM-DDTHH:MM:SS.ffffff'   # noqa: E501

        :return: The modification_time of this ObjectInfo.  # noqa: E501
        :rtype: datetime
        """
        return self._modification_time

    @modification_time.setter
    def modification_time(self, modification_time):
        """Sets the modification_time of this ObjectInfo.

        The date time at which this object was last modified. This will be auto generated by the underlying database. Any user input for this field will be ignored. This will be in the isoformat of 'YYYY-MM-DDTHH:MM:SS.ffffff'   # noqa: E501

        :param modification_time: The modification_time of this ObjectInfo.  # noqa: E501
        :type: datetime
        """

        self._modification_time = modification_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ObjectInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ObjectInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
