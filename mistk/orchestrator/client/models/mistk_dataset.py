# coding: utf-8

"""
    Model Integration Software ToolKit - Orchestrator

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 1.3.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mistk.orchestrator.client.models.dataset import Dataset  # noqa: F401,E501
from mistk.orchestrator.client.models.dataset_statistics import DatasetStatistics  # noqa: F401,E501
from mistk.orchestrator.client.models.object_info import ObjectInfo  # noqa: F401,E501
from mistk.orchestrator.client.models.object_reference import ObjectReference  # noqa: F401,E501


class MistkDataset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object_info': 'ObjectInfo',
        'datastash_id': 'str',
        'datastash_sub_dir': 'str',
        'modality': 'str',
        'format': 'str',
        'statistics': 'DatasetStatistics',
        'default_ground_truth_set_reference': 'ObjectReference',
        'data_path': 'str'
    }

    attribute_map = {
        'object_info': 'objectInfo',
        'datastash_id': 'datastashId',
        'datastash_sub_dir': 'datastashSubDir',
        'modality': 'modality',
        'format': 'format',
        'statistics': 'statistics',
        'default_ground_truth_set_reference': 'defaultGroundTruthSetReference',
        'data_path': 'dataPath'
    }

    def __init__(self, object_info=None, datastash_id=None, datastash_sub_dir=None, modality=None, format=None, statistics=None, default_ground_truth_set_reference=None, data_path=None):  # noqa: E501
        """MistkDataset - a model defined in Swagger"""  # noqa: E501

        self._object_info = None
        self._datastash_id = None
        self._datastash_sub_dir = None
        self._modality = None
        self._format = None
        self._statistics = None
        self._default_ground_truth_set_reference = None
        self._data_path = None
        self.discriminator = None

        self.object_info = object_info
        if datastash_id is not None:
            self.datastash_id = datastash_id
        if datastash_sub_dir is not None:
            self.datastash_sub_dir = datastash_sub_dir
        if modality is not None:
            self.modality = modality
        if format is not None:
            self.format = format
        if statistics is not None:
            self.statistics = statistics
        if default_ground_truth_set_reference is not None:
            self.default_ground_truth_set_reference = default_ground_truth_set_reference
        if data_path is not None:
            self.data_path = data_path

    @property
    def object_info(self):
        """Gets the object_info of this MistkDataset.  # noqa: E501


        :return: The object_info of this MistkDataset.  # noqa: E501
        :rtype: ObjectInfo
        """
        return self._object_info

    @object_info.setter
    def object_info(self, object_info):
        """Sets the object_info of this MistkDataset.


        :param object_info: The object_info of this MistkDataset.  # noqa: E501
        :type: ObjectInfo
        """
        if object_info is None:
            raise ValueError("Invalid value for `object_info`, must not be `None`")  # noqa: E501

        self._object_info = object_info

    @property
    def datastash_id(self):
        """Gets the datastash_id of this MistkDataset.  # noqa: E501

        The id of the datastash associated with this dataset where all of its files will be stored.   # noqa: E501

        :return: The datastash_id of this MistkDataset.  # noqa: E501
        :rtype: str
        """
        return self._datastash_id

    @datastash_id.setter
    def datastash_id(self, datastash_id):
        """Sets the datastash_id of this MistkDataset.

        The id of the datastash associated with this dataset where all of its files will be stored.   # noqa: E501

        :param datastash_id: The datastash_id of this MistkDataset.  # noqa: E501
        :type: str
        """

        self._datastash_id = datastash_id

    @property
    def datastash_sub_dir(self):
        """Gets the datastash_sub_dir of this MistkDataset.  # noqa: E501

        This field denotes the sub path within the datastash where this dataset's data resides.   # noqa: E501

        :return: The datastash_sub_dir of this MistkDataset.  # noqa: E501
        :rtype: str
        """
        return self._datastash_sub_dir

    @datastash_sub_dir.setter
    def datastash_sub_dir(self, datastash_sub_dir):
        """Sets the datastash_sub_dir of this MistkDataset.

        This field denotes the sub path within the datastash where this dataset's data resides.   # noqa: E501

        :param datastash_sub_dir: The datastash_sub_dir of this MistkDataset.  # noqa: E501
        :type: str
        """

        self._datastash_sub_dir = datastash_sub_dir

    @property
    def modality(self):
        """Gets the modality of this MistkDataset.  # noqa: E501

        The type of the data supported by this implementation, one of image, audio, video, text, etc. This does not specify the format of the data. Available modalities can be found using the \"global/meta/dataModalities\" endpoint   # noqa: E501

        :return: The modality of this MistkDataset.  # noqa: E501
        :rtype: str
        """
        return self._modality

    @modality.setter
    def modality(self, modality):
        """Sets the modality of this MistkDataset.

        The type of the data supported by this implementation, one of image, audio, video, text, etc. This does not specify the format of the data. Available modalities can be found using the \"global/meta/dataModalities\" endpoint   # noqa: E501

        :param modality: The modality of this MistkDataset.  # noqa: E501
        :type: str
        """

        self._modality = modality

    @property
    def format(self):
        """Gets the format of this MistkDataset.  # noqa: E501

        A string representing the name of the format of the dataset. This should be sufficient to ensure that models and transforms  are able to read and parse the data.   # noqa: E501

        :return: The format of this MistkDataset.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this MistkDataset.

        A string representing the name of the format of the dataset. This should be sufficient to ensure that models and transforms  are able to read and parse the data.   # noqa: E501

        :param format: The format of this MistkDataset.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def statistics(self):
        """Gets the statistics of this MistkDataset.  # noqa: E501


        :return: The statistics of this MistkDataset.  # noqa: E501
        :rtype: DatasetStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this MistkDataset.


        :param statistics: The statistics of this MistkDataset.  # noqa: E501
        :type: DatasetStatistics
        """

        self._statistics = statistics

    @property
    def default_ground_truth_set_reference(self):
        """Gets the default_ground_truth_set_reference of this MistkDataset.  # noqa: E501

        A reference to the default ground truth set that is associated with this dataset        # noqa: E501

        :return: The default_ground_truth_set_reference of this MistkDataset.  # noqa: E501
        :rtype: ObjectReference
        """
        return self._default_ground_truth_set_reference

    @default_ground_truth_set_reference.setter
    def default_ground_truth_set_reference(self, default_ground_truth_set_reference):
        """Sets the default_ground_truth_set_reference of this MistkDataset.

        A reference to the default ground truth set that is associated with this dataset        # noqa: E501

        :param default_ground_truth_set_reference: The default_ground_truth_set_reference of this MistkDataset.  # noqa: E501
        :type: ObjectReference
        """

        self._default_ground_truth_set_reference = default_ground_truth_set_reference

    @property
    def data_path(self):
        """Gets the data_path of this MistkDataset.  # noqa: E501


        :return: The data_path of this MistkDataset.  # noqa: E501
        :rtype: str
        """
        return self._data_path

    @data_path.setter
    def data_path(self, data_path):
        """Sets the data_path of this MistkDataset.


        :param data_path: The data_path of this MistkDataset.  # noqa: E501
        :type: str
        """

        self._data_path = data_path

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MistkDataset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MistkDataset):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
